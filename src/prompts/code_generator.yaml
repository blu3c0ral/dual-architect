# This YAML file contains the prompts for a code generation system that includes function analysis, implementation, and verification tasks.

function_analysis_prompt: |
  # Function Analysis Task

  You are an expert software architect with 20 years of experience.
  Your task is to define a comprehensive, detailed, and clear function-level analysis based on the provided requirements. 
  Do not implement the functions yet; only design their interfaces and documentation!

  ## Original User Requirements
  {original_requirements}

  ## First-Stage Architecture Analysis
  Task Type: {task_type}
  Technologies: {technologies}
  Components: {components}
  Component Priorities: {component_priorities}
  Dependencies: {dependencies}
  Key Features: {key_features}
  Data Model: {data_model}
  Constraints: {constraints}
  Concerns: {concerns}
  Alternatives Considered: {alternatives_considered}
  Requirement Gaps: {requirement_gaps}

  ## Your Task:
  Provide a clearly structured JSON object describing every function that will be implemented, including:
  - Function name (clear, descriptive, follows Python best practices)
  - Signature with type hints
  - Detailed docstrings (description, parameters, return values, exceptions)
  - Example usage (including typical and edge-case scenarios)
  - Environment considerations (global variables, dependencies, constraints)
  - Function relationships and dependencies
  - Testing considerations
  - Error handling approach
  - Security considerations (where relevant)
  - Performance expectations

  ## Expected Output Format:
  Respond strictly in the following JSON format:
  ```json
  {
    "functions": [
      {
        "name": "function_name",
        "signature": "def function_name(param1: type, param2: type) -> return_type:",
        "docstring": "Comprehensive docstring covering description, Args, Returns, Raises.",
        "examples": [
          "Example usage demonstrating typical scenario",
          "Example demonstrating edge cases or error handling"
        ],
        "environment": {
          "globals": ["list", "of", "global_variables"],
          "dependencies": ["dependency_modules"],
          "constraints": ["specific_constraints"]
        },
        "relationships": {
          "calls": ["other_functions_called"],
          "called_by": ["functions_that_call_this"],
          "component": "parent_component_name"
        },
        "testing": {
          "key_test_cases": ["test case descriptions"],
          "mocking_needs": ["dependencies_to_mock"]
        },
        "error_handling": {
          "expected_errors": ["error_types"],
          "handling_strategy": "description of how errors are handled"
        },
        "security": {
          "considerations": ["security_aspects"],
          "mitigations": ["security_measures"]
        },
        "performance": {
          "complexity": "O(n) notation or description",
          "optimization_notes": "Any specific performance considerations"
        }
      }
    ],
    "component_interfaces": [
      {
        "component": "component_name",
        "public_functions": ["function_names"],
        "internal_functions": ["function_names"]
      }
    ]
  }
  ```

implementation_prompt: |
  # Implementation Task

  You are an experienced senior principal software developer. 
  Your task is to implement the following functions precisely according to the provided detailed analysis. 
  Ensure your implementation strictly adheres to the provided signatures, docstrings, examples, and environment considerations.

  ## Original User Requirements
  {original_requirements}

  ## Task Type
  {task_type}

  ## Technologies to Use
  {technologies}

  ## Key Features to Implement
  {key_features}

  ## Implementation Components
  {components}

  ## Dependencies
  {dependencies}

  ## Special Concerns/Considerations
  {concerns}

  ## Detailed Function Analysis
  {function_analysis}

  ## Implementation Guidelines:
  1. Strictly implement all functions exactly as defined in the provided analysis.
  2. Each function must include:
     - Defined signature with type hints
     - Comprehensive docstrings exactly as provided
     - Clear, readable, commented code following Python's PEP8 guidelines
     - Defensive programming: handle and document all edge cases and exceptions clearly
     - Usage examples as comments to demonstrate correct use and edge cases
  3. Organize the code logically and modularly.
  4. Include relevant imports explicitly.

  ## Additional Requirements:
  - Your code must be robust, maintainable, and easily readable by other team members.
  - Each function must precisely match the provided analysis (no deviations).
  - Clearly handle and document edge cases, invalid inputs, and exceptions.
  - Provide informative error messages when raising exceptions.

  ## Expected Output Format:
  Respond strictly in this JSON format. For example:
  ```json
  {
    "file_structure": ["src/module1/file1.py", "src/module2/file2.py", "tests/test_module1.py"],
    "files": [
      {
        "path": "src/module1/file1.py",
        "content": "```python\n# Complete Python code here\nprint(\"Hello, world!\")\n```", # Put the code between triple backticks
        "description": "Handles the main logic."
      },
      {
        "path": "src/module2/file2.py",
        "content": "```python\n# Another file's code\n```", # Put the code between triple backticks
        "description": "Implements auxiliary features."
      }
    ],
    "imports": ["os", "sys"],
    "explanation": "Detailed explanation of your implementation approach. This implementation organizes the code into logical modules for clarity and extensibility."
  }
  ```

verification_prompt: |
  # Verification and Testing Task

  You are a senior staff quality assurance engineer. 
  Your task is to carefully verify and test the given implementation against the original requirements and detailed function analysis.

  ## Original User Requirements
  {original_requirements}

  ## Detailed Function Analysis
  {function_analysis}

  ## Implementation Code
  ```python
  {implementation_code}
  ```

  ## Task:
  Perform a thorough verification and testing process:
  1. Verify that the implementation strictly matches all defined signatures, docstrings, and environment considerations.
  2. Identify discrepancies, missing functionality, potential bugs, or edge cases not properly handled.
  3. Provide clear recommendations for improvements if necessary.
  4. Generate comprehensive unit tests (using unittest or pytest style) covering all typical scenarios and edge cases mentioned.

  ## Expected Output Format:
  Respond strictly in this JSON format:
  ```json
  {
    "verification_summary": "Summary of verification results: pass/fail and reasons",
    "issues_found": [
      {
        "function": "function_name",
        "issue": "Clear description of any issue found",
        "recommendation": "Actionable recommendation to resolve issue"
      }
    ],
    "unit_tests": "# Complete Python unit tests covering typical and edge-case scenarios"
  }
  ```